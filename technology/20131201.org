* jsessionid问题

在flymeal项目中，一直有一个DisableUrlSessionFilter,在一般的ssh2框架中
一直没发现有什么作用，在学习springmvc的过程中，有以下例子
/dashboard 需要登录
/          登录界面

出现一下情况： 先打开登录界面，然后不登录，再打开 /dashboard，会跳转到
主页，但 后面没有跟上；jsessionid=xxxxxxx

如果新打开浏览器，直接输入 /dashboard， 也会跳转到主页，但会跟上
jsessionid=xxxx

个人理解：
第一种方式，先访问 /， 会新建一个session， 再访问 /dashboard时，cookie
中就会有jsessionid， 服务器端 判断用户是否登录的interceptor中，
request.getSession() 根据jsessionid查找即可，

但是第二种直接访问/dashboard时，会直接访问 request.getSession(), 但是
request中根本就没有相关信息，所以getSession方法就会在服务器端新建一个
session，为了告诉浏览器用的会话，就在url后面跟上了jsessionId。

为了验证此想法的正确性，在验证用户是否登录的interceptor的代码如下：
#+BEGIN_SRC 
if(request.getSession.getAttribute("admin") == null)) {
    request.getSession.invalidate(); //销毁session
    response.sendRedirect("/");
}
#+END_SRC

即多了一句把session销毁，这样服务器就不许要告诉浏览器用的是哪个session
了，测试发现满足期望条件， 直接 打开/dashboard跳转到 /后url不加
jsessionid参数

*除了手动销毁session，也可一使用DisableUrlSessionFilter，更为简洁*
#+BEGIN_SRC java
package com.shikuaigou.control.filter;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import javax.servlet.http.HttpSession;

public class DisableUrlSessionFilter implements Filter{
	
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
		// skip non-http requests
		if (!(request instanceof HttpServletRequest)) {
		     chain.doFilter(request, response);
		    return;
		}

        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;

        // clear session if session id in URL
        if (httpRequest.isRequestedSessionIdFromURL()) {
        	HttpSession session = httpRequest.getSession();
            if (session != null) session.invalidate();
        }

        // wrap response to remove URL encoding
        HttpServletResponseWrapper wrappedResponse = new HttpServletResponseWrapper(httpResponse) {
            @Override
            public String encodeRedirectUrl(String url) {
                return url;
            }

          
            public String encodeRedirectURL(String url) {
                return url;
            }

            
            public String encodeUrl(String url) {
                return url;
            }

            
            public String encodeURL(String url) {
                return url;
            }
        };

        // process next request in chain
        chain.doFilter(request, wrappedResponse);
     }

    /**
      * Unused.
     */
    public void init(FilterConfig config) throws ServletException {
    }

    /**
      * Unused.
     */
    public void destroy() {
    }

}


#+END_SRC


--------------------------------------------

That's because cookies are enabled for the browsers & it (app-server,
is it tomcat?) uses cookies when it is sure that cookies are enabled
(it can only know cookies are enabled for certain, if it put the
jsessionid in the URL for the first request). The jsessionid only goes
in if you enable URLRewriting in the code (happens automatically in
most frameworks)

http://stackoverflow.com/questions/11327631/remove-jsessionid-from-url

jessionid通过这样的方式来从客户端传递到服务器端,从而来标识session。
注意一点，jsessionid跟一般的url参数传递方式是不同的，不是作为参数跟在"？"后面，而是紧跟在url后面用"；"来分隔。
这样在用户禁用cookie的时候我们也可以传递jsessionid来使用session了，
只不过需要每次都把jseesionid作为参数跟在url后面传递。
那这样岂不是很麻烦，每次请求一个url都要判断cookie是否可用，
如果禁用了cookie，还要从url里解析出jsessionid，然后跟在处理完后转到的url后面，以保持jsessionid的传递。
这些问题sun当然已经帮我们想到了。
所以提供了2个方法来使事情变得简单：response.encodeURL()和response.encodeRedirectURL()。
这2个方法会判断cookie是否可用，如果禁用了会解析出url中的jsessionid，并连接到指定的url后面，如果没有找到jessionid会自动帮我们生成一个。
至于为什么要有2个方法？这2个方法有什么不同？google了一下，说是这2个方法在判断是否要包含jsessionid的逻辑上会稍有不同。
在调用HttpServletResponse.sendRedirect前，应该先调用encodeRedirectURL()方法，否则可能会丢失Sesssion信息。
这2个方法的使用方法如：response.sendRedirect(response.encodeURL("/myapp/input.jsp"));。
如果cookie没有禁用，我们在浏览器地址栏中看到的地址是这样的：/myapp/input.jsp，如果禁用了cookie，我们会看到：/myapp/input.jsp;jsessionid=73E6B2470C91A433A6698C7681FD44F4。
所以，我们在写web应用的时候，为了保险起见，应该在程序里的每一个跳转url
上都使用这2个方法，来保证session的可用性

