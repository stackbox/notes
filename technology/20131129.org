* what's the differenct between proxy pattern and strategy pattern and command pattern

** Proxy pattern
代理类知道被代理类的行为，因为代理类与被代理类实现的是同一个接口，因此
代理类与被代理类的结构是相同的。
** Strategy pattern
而策略模式中，策略容器并不知道内部策略的详细信息，因为容器并没有实现与
内部策略相同的接口，即容器与内部策略只是简单的组合关系，容器只是将内部
策略的行为抽取出来，进行了统一的实现。 
** Command pattern





* The difference between command and strategy
Typically the Command pattern is used to make an object out of what needs to be done -- to take an operation and its arguments and wrap them up in an object to be logged, held for undo, sent to a remote site, etc. There will tend to be a large number of distinct Command objects that pass through a given point in a system over time, and the Command objects will hold varying parameters describing the operation requested.

The Strategy pattern, on the other hand, is used to specify how something should be done, and plugs into a larger object or method to provide a specific algorithm. A Strategy for sorting might be a merge sort, might be an insertion sort, or perhaps something more complex like only using merge sort if the list is larger than some minimum size. Strategy objects are rarely subjected to the sort of mass shuffling about that Command objects are, instead often being used for configuration or tuning purposes.

Both patterns involve factoring the code and possibly parameters for
individual operations out of the original class that contained them
into another object to provide for independent variability. The
differences are in the use cases encountered in practice and the
intent behind each pattern.



Strategy - Quicksort or Mergesort [algo change]
Command - Open or Close [action change]

* Proxy pattern的两种模式
** 静态代理： 由程序员创建或特定的工具自动生成源代码，编译运行，在程序运行前代理class就已经存在了
** 动态代理： 在程序运行时，运用反射机制动态创建而成

* How to implement dynamic proxy 
** 使用原生jdk动态代理，实现InvocationHandler接口， 被代理类需要实现某些接口
** 使用cglib+asm进行动态代理







* ToDo
** Javascript mixin and extend


